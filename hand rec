import pygame
from pygame.locals import *
from math import *
import numpy as np
import random
from scipy.spatial import Voronoi, voronoi_plot_2d
import matplotlib.pyplot as plt
from matplotlib import animation
import decimal
from shapely.wkt import loads as load_wkt

pygame.init()

display_width = 500
display_height = 500

phi1=0.3
phi2=1.6
#phi3=0.4
phi3 = decimal.Decimal(random.randrange(-314, 314))/100

black = (0,0,0)
white = (255,255,255)
red = (255,0,0)

gameDisplay = pygame.display.set_mode((display_width,display_height))
gameDisplay.fill(white)

clock = pygame.time.Clock()
crashed = False

play1 = pygame.image.load('/home/rishab/Downloads/player.png')
play1 = pygame.transform.scale(play1,(10,10))

play2 = pygame.image.load('/home/rishab/Downloads/player.png')
play2 = pygame.transform.scale(play1,(10,10))

play3 = pygame.image.load('/home/rishab/Downloads/player.png')
play3 = pygame.transform.scale(play1,(10,10))

p1 = [240,99]
p3 = [67,300]
p2 = [400,327]
l1 = []
L1 = []
phi = []
v = np.ndarray(shape=(2,2))
u = np.ndarray(shape=(2,2))
point = np.zeros(2)
neigh = np.zeros(2)
theta = 0

def car(x,y):
	gameDisplay.blit(play1, (p1[0],p1[1]))
	gameDisplay.blit(play2, (p2[0],p2[1]))
	gameDisplay.blit(play3, (p3[0],p3[1]))


def dist(x,y):
	return sqrt(((x[0]-y[0])**2)+((x[1]-y[1])**2))

def ang(x,y):
	angle = np.arctan2((x[1]-y[1]),(x[0]-y[0]))
	return (angle)

phi10 = ang(p1,p3)
phi20 = ang(p2,p3)
phi30 = ang(p1,p2)
print(phi10,phi20,phi30)

pygame.draw.rect(gameDisplay, red, (0,0,500,500), 2)
while not crashed:
	pur_co = []
	cent = []
	ang1 = abs((ang(p1,p2))-(ang(p1,p3)))
	ang2 = abs((ang(p2,p3))-(ang(p2,p1)))
	ang3 = abs((ang(p3,p2))-(ang(p3,p1)))
	print(ang1,ang2,ang3)
	if ang1>np.pi:
		ang1 = ang1-np.pi
	if ang2>np.pi:
		ang2 = ang1-np.pi
	if ang3>np.pi:
		ang3 = ang1-np.pi

	if ang1>np.pi/2:
		obt = [2,3]
	elif ang2>np.pi/2:
		obt = [1,3]
	elif ang3>np.pi/2:
		obt = [1,2]
	else:
		obt = [0,0]
	points = [p1[0],p1[1]]
	i=0
	gameDisplay.fill(white)
	pygame.draw.line(gameDisplay, red, (p1[0],p1[1]), (p3[0],p3[1]), 3)
	pygame.draw.line(gameDisplay, red, (p2[0],p2[1]), (p3[0],p3[1]), 3)
	pygame.draw.line(gameDisplay, red, (p2[0],p2[1]), (p1[0],p1[1]), 3)



	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			crashed = True
	points = np.vstack((points,p1))
	points = np.vstack((points,p2))
	points = np.vstack((points,p3))
	vor = Voronoi(points)
	vert = vor.vertices
	#voronoi_plot_2d(vor)
	vert = vor.vertices
	#print(vert)
	d1=0
	d2=0
	d3=0
	l1 = []
	L1 = []
	cent = []
	for i in range (len(vert)):
		d1 = dist(p1,vert[i])
		d2 = dist(p2,vert[i])
		d3 = dist(p3,vert[i])
		print(d1,d2,d3)
		if (abs(d1-d2))<10 and abs(d1-d3)<10:
			mp = vert[i]
			pos = i
	for j in range(3):
		for k in range(j+1,3):
			mid1 = (points[j+1][0]+points[k+1][0])/2
			mid2 = (points[j+1][1]+points[k+1][1])/2
			theta = ang(mp,[mid1,mid2])
			if theta>0 and theta<1.5707:
				y_new = mp[1]+(mid2-mp[1])/(mid1-mp[0])*(0-mp[0])
				x_new = mp[0]+(mid1-mp[0])/(mid2-mp[1])*(0-mp[1])
				if x_new<0 or x_new>500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (0,y_new), (mp[0],mp[1]), 3)
						if k+1 == 3:
							cent.append([0,y_new])
					y_n = y_new+(mp[1]-y_new)/(mp[0]-0) * (500-0)
					x_n = 0+(mp[0]-0)/(mp[1]-y_new) * (500-y_new)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,500), 3)
							if k+1 == 3:
								cent.append([x_n,500])
						pur_co.append([x_n,500])
						L = dist([x_n,500],[0,y_new])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (500,y_n), 3)
							if k+1 == 3:
								cent.append([500,y_n])
						pur_co.append([500,y_n])
						L = dist([500,y_n],[0,y_new])
					l = dist([0,y_new],[mp[0],mp[1]])

				else:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (x_new,0), (mp[0],mp[1]), 3)
					y_n = 0+(mp[1]-0)/(mp[0]-x_new) * (500-x_new)
					x_n = x_new+(mp[0]-x_new)/(mp[1]-0) * (500-0)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,500), 3)
							if k+1 == 3:
								cent.append([x_n,500])
						pur_co.append([x_n,500])
						L = dist([x_n,500],[x_new,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (500,y_n), 3)
							if k+1 == 3:
								cent.append([500,y_n])
						pur_co.append([x_n,500])
						L = dist([500,y_n],[x_new,0])
					l = dist([x_new,0],[mp[0],mp[1]])
			elif theta>1.5707 and theta<3.1417:
				y_new = mp[1]+(mid2-mp[1])/(mid1-mp[0])*(500-mp[0])
				x_new = mp[0]+(mid1-mp[0])/(mid2-mp[1])*(0-mp[1])
				if x_new>0 and x_new<500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (x_new,0), (mp[0],mp[1]), 3)
						if k+1 == 3:
							cent.append([x_new,0])
					y_n = 0+(mp[1]-0)/(mp[0]-x_new) * (0-x_new)
					x_n = x_new+(mp[0]-x_new)/(mp[1]-0) * (500-0)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,500), 3)
							if k+1 == 3:
								cent.append([x_n,500])
						pur_co.append([x_n,500])
						L = dist([x_n,500],[x_new,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (0,y_n), 3)
							if k+1 == 3:
								cent.append([0,y_n])
						pur_co.append([0,y_n])
						L = dist([0,y_n],[x_new,0])
					l = dist([x_new,0],[mp[0],mp[1]])
				elif y_new>0 and y_new<500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (500,y_new), (mp[0],mp[1]), 3)
						if k+1 == 3:
							cent.append([500,y_new])
					y_n = y_new+(mp[1]-y_new)/(mp[0]-500) * (0-500)
					x_n = 500+(mp[0]-500)/(mp[1]-y_new) * (500-y_new)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,500), 3)
							if k+1 == 3:
								cent.append([x_n,500])
						pur_co.append([x_n,500])
						L = dist([500,y_new],[x_n,500])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (0,y_n), 3)
							if k+1 == 3:
								cent.append([0,y_n])
						pur_co.append([0,y_n])
						L = dist([500,y_new],[0,y_n])
					l = dist([500,y_new],[mp[0],mp[1]])
			elif theta>-1.5707 and theta<0:
				y_new = mp[1]+(mid2-mp[1])/(mid1-mp[0])*(0-mp[0])
				x_new = mp[0]+(mid1-mp[0])/(mid2-mp[1])*(500-mp[1])
				if x_new>0 and x_new<500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (x_new,500), (mp[0],mp[1]), 3)
						if k+1 == 3:
							cent.append([x_new,500])
					y_n = 500+(mp[1]-500)/(mp[0]-x_new) * (500-x_new)
					x_n = x_new+(mp[0]-x_new)/(mp[1]-500) * (0-500)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,0), 3)
							if k+1 == 3:
								cent.append([x_n,0])
						pur_co.append([x_n,0])
						L = dist([x_new,500],[x_n,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (500,y_n), 3)
							if k+1 == 3:
								cent.append([500,y_new])
						pur_co.append([500,y_n])
						L = dist([x_new,500],[500,y_n])
					l = dist([x_new,500],[mp[0],mp[1]])
				elif y_new>0 and y_new<500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (0,y_new), (mp[0],mp[1]), 3)
					y_n = y_new+(mp[1]-y_new)/(mp[0]-0) * (500-0)
					x_n = 0+(mp[0]-0)/(mp[1]-y_new) * (0-y_new)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,0), 3)
							if k+1 == 3:
								cent.append([x_n,0])
						pur_co.append([x_n,0])
						L = dist([0,y_new],[x_n,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (500,y_n), 3)
							if k+1 == 3:
								cent.append([500,y_n])
						pur_co.append([500,y_n])
						L = dist([0,y_new],[500,y_n])
					l = dist([0,y_new],[mp[0],mp[1]])
			elif theta>-3.1417 and theta<-1.5707:
				y_new = mp[1]+(mid2-mp[1])/(mid1-mp[0])*(500-mp[0])
				x_new = mp[0]+(mid1-mp[0])/(mid2-mp[1])*(500-mp[1])
				if x_new<0 or x_new>500:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (500,y_new), (mp[0],mp[1]), 3)
							if k+1 == 3:
								cent.append([500,y_new])
					y_n = y_new+(mp[1]-y_new)/(mp[0]-500) * (0-500)
					x_n = 500+(mp[0]-500)/(mp[1]-y_new) * (0-y_new)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,0), 3)
							if k+1 == 3:
								cent.append([x_n,0])
						pur_co.append([x_n,0])
						L = dist([500,y_new],[x_n,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (0,y_n), 3)
							if k+1 == 3:
								cent.append([0,y_n])
						pur_co.append([0,y_n])
						L = dist([500,y_new],[0,y_n])
					l = dist([500,y_new],[mp[0],mp[1]])
				else:
					if j+1 == obt[0] and k+1 == obt[1]:
						pass
					else:
						pygame.draw.line(gameDisplay, black, (x_new,500), (mp[0],mp[1]), 3)
						if k+1 == 3:
							cent.append([x_new,500])
					y_n = 500+(mp[1]-500)/(mp[0]-x_new) * (0-x_new)
					x_n = x_new+(mp[0]-x_new)/(mp[1]-500) * (0-500)
					if x_n>0 and x_n<500:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (x_n,0), 3)
							if k+1 == 3:
								cent.append([x_n,0])
						pur_co.append([x_n,0])
						L = dist([x_new,500],[x_n,0])
					else:
						if j+1 == obt[0] and k+1 == obt[1]:
							pygame.draw.line(gameDisplay, (121,35,218), (mp[0], mp[1]), (0,y_n), 3)
							if k+1 == 3:
								cent.append([0,y_n])
						pur_co.append([0,y_n])
						L = dist([x_new,500],[0,y_n])
					l = dist([x_new,500],[mp[0],mp[1]])
			#
			#phi.append(theta)
			l1.append(l)
			L1.append(L)
	#L1 = [x + y for x, y in zip(l1, L1)]
	#print("l1",l1)
	#print("L1",L1)

	eps1 = dist(p1,p3)
	eps2 = dist(p2,p3)
	if eps1<20 or eps2<20:
		print("caught")
		crashed = True
	#print(eps1,eps2)
	phi1 = ang(p1,p3)
	phi2 = ang(p2,p3)
	pang1 = ang((mp[0],mp[1]),pur_co[1])
	pang2 = ang((mp[0],mp[1]),pur_co[2])
	#print("PANG",pang1,pang2)
	#print("PHI", phi1, phi2)
	v[0][0] = -(L1[1])/2
	v[0][1] = (l1[1]**2-(L1[1]-l1[1])**2)/(2*(eps1))
	v[1][0] = -(L1[2])/2
	v[1][1] = (l1[2]**2-(L1[2]-l1[2])**2)/(2*(eps2))
	abs1 = sqrt(v[0][0]**2+v[0][1]**2)
	abs2 = sqrt(v[1][0]**2+v[1][1]**2)
	v[0] /= -abs1
	v[1] /= -abs2


	if phi1<np.pi/2 and phi1>0:
		u[0][0] = -v[0][0]*cos(phi1) + v[0][1]*cos(np.pi/2-phi1)
		u[0][1] = -v[0][0]*sin(phi1) - v[0][1]*sin(np.pi/2-phi1)
	if phi1>(np.pi)/2 and phi1>0:
		u[0][0] = v[0][0]*cos(np.pi-phi1) + v[0][1]*cos(np.pi/2-np.pi+phi1)
		u[0][1] = -v[0][0]*sin(np.pi-phi1) + v[0][1]*sin(np.pi/2-np.pi+phi1)
	if phi1<-np.pi/2 and phi1<0:
		u[0][0] = v[0][0]*cos(np.pi+phi1) + v[0][1]*cos(np.pi/2-np.pi-phi1)
		u[0][1] = v[0][0]*sin(np.pi+phi1) - v[0][1]*sin(np.pi/2-np.pi-phi1)
	if phi1>-(np.pi)/2 and phi1<0:
		u[0][0] = -v[0][0]*cos(abs(phi1)) + v[0][1]*cos(np.pi/2+phi1)
		u[0][1] = v[0][0]*sin(abs(phi1)) + v[0][1]*sin(np.pi/2+phi1)


	if phi2<np.pi/2 and phi2>0:
		u[1][0] = -v[1][0]*cos(phi2) + v[1][1]*cos(np.pi/2-phi2)
		u[1][1] = -v[1][0]*sin(phi2) - v[1][1]*sin(np.pi/2-phi2)
	if phi2>(np.pi)/2 and phi2>0:
		u[1][0] = v[1][0]*cos(np.pi-phi2) + v[1][1]*cos(np.pi/2-np.pi+phi2)
		u[1][1] = -v[1][0]*sin(np.pi-phi2) + v[1][1]*sin(np.pi/2-np.pi+phi2)
	if phi2<-np.pi/2 and phi2<0:
		u[1][0] = v[1][0]*cos(np.pi+phi2) + v[1][1]*cos(np.pi/2-np.pi-phi2)
		u[1][1] = v[1][0]*sin(np.pi+phi2) - v[1][1]*sin(np.pi/2-np.pi-phi2)
	if phi2>-(np.pi)/2 and phi2<0:
		u[1][0] = -v[1][0]*cos(abs(phi2)) + v[1][1]*cos(np.pi/2+phi2)
		u[1][1] = v[1][0]*sin(abs(phi2)) + v[1][1]*sin(np.pi/2+phi2)






	p1[0]+= u[0][0]
	p1[1]+= u[0][1]
	p2[0]+= u[1][0]
	p2[1]+= u[1][1]
	p3[0]-= cos(phi3)
	p3[1]-= sin(phi3)
	print("V",v)
	print("U",u)
	print("CENT",cent)
	#eps = dist
	#v_v = l**2-(L-l)**2/(2*





	#print(vert)
	#print(vor.ridge_vertices)
	pygame.draw.rect(gameDisplay, (121,212,98), (0,0,500,500), 5)
	car(p1[0],p1[1])
	car(p2[0],p2[1])
	pygame.display.update()
	#print(points)
	#plt.show()
	clock.tick(20)
	#crashed = True
	#plt.show()
raw_input()
pygame.quit()
quit()
